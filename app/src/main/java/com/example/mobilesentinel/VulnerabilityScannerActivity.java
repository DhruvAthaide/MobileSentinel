package com.example.mobilesentinel;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import java.util.List;
import java.util.concurrent.Executors;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class VulnerabilityScannerActivity extends AppCompatActivity {

    private EditText inputField;
    private TextView resultTextView;
    private CVEApi cveApi;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.vulnerability_scanner_activity);

        inputField = findViewById(R.id.inputField);
        resultTextView = findViewById(R.id.resultTextView);
        Button searchButton = findViewById(R.id.searchButton);

        // Initialize Retrofit
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://services.nvd.nist.gov/rest/json/cves/2.0/")
                .addConverterFactory(GsonConverterFactory.create())
                .callbackExecutor(Executors.newSingleThreadExecutor())
                .build();

        cveApi = retrofit.create(CVEApi.class);

        // Set up search button listener
        searchButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String keyword = inputField.getText().toString().trim();
                if (!keyword.isEmpty()) {
                    searchVulnerabilities(keyword);
                } else {
                    Toast.makeText(VulnerabilityScannerActivity.this, "Enter a keyword", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    private void searchVulnerabilities(String keyword) {
        // Create a call with a keyword search query parameter
        Call<CVEResponse> call = cveApi.getVulnerabilities(keyword);

        call.enqueue(new Callback<CVEResponse>() {
            @Override
            public void onResponse(Call<CVEResponse> call, Response<CVEResponse> response) {
                if (response.isSuccessful() && response.body() != null && !response.body().getVulnerabilities().isEmpty()) {
                    displayResults(response.body().getVulnerabilities());
                } else {
                    resultTextView.setText("No results found.");
                }
            }

            @Override
            public void onFailure(Call<CVEResponse> call, Throwable t) {
                resultTextView.setText("Error: " + t.getMessage());
            }
        });
    }

    private void displayResults(List<CVEResponse.Vulnerability> vulnerabilities) {
        StringBuilder results = new StringBuilder();
        for (CVEResponse.Vulnerability vulnerability : vulnerabilities) {
            results.append("CVE ID: ").append(vulnerability.getCveId()).append("\n");
            results.append("Description: ").append(vulnerability.getDescription()).append("\n");
            results.append("Published Date: ").append(vulnerability.getPublishedDate()).append("\n");
            results.append("Last Modified Date: ").append(vulnerability.getLastModifiedDate()).append("\n");
            results.append("CVSS Score: ").append(vulnerability.getCvssScore()).append("\n\n");
        }
        resultTextView.setText(results.toString());
    }
}